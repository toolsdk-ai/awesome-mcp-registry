name: 'Build Web Server Docker'
description: 'Build Docker Images'
inputs:
  dockerfile:
    description: Where is the Dockerfile?
    default: 'Dockerfile'
  image:
    description: Image name, default "toolsdk-registry"
    default: toolsdk-registry
  username:
    description: repository_owner?
    required: true
  password:
    description: 'Docker repo password'
    required: true
  edition:
    description: Image Edition, default "toolsdk-ai"?
    default: 'toolsdk-ai'
runs:
  using: 'composite'
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Get Version Number
      id: get_version_step
      shell: bash
      run: |
        echo "version=$(grep -o '"version": *"[^"]*"' package.json | cut -d '"' -f 4)" >> $GITHUB_OUTPUT
        echo "prerelease=$(grep -o '"version": *"[^"]*"' package.json | cut -d '"' -f 4 | cut -d '.' -f 3 | cut -d '-' -f 2)"  >> $GITHUB_OUTPUT

    # ${{ steps.commit_message_step.outputs.version }}
    - name: Build and push toolsdk-registry docker
      uses: docker/build-push-action@v5
      with:
        file: ${{ inputs.dockerfile }}
        context: .
        push: true
        # Tags, :latest,  :latest-alpha,  :0.5.3-alpha.1
        tags: ghcr.io/toolsdk-ai/${{ inputs.image }}:latest,ghcr.io/toolsdk-ai/${{ inputs.image }}:latest-${{ steps.get_version_step.outputs.prerelease }},ghcr.io/toolsdk-ai/${{ inputs.image }}:${{ steps.get_version_step.outputs.version }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
    - name: trigger deploy-toolsdk-registry repository_dispatch
      env:
        APP: ${{ inputs.image }}
        CR_PAT: ${{ inputs.password }}
        EDITION: ${{ inputs.edition }}
        IMAGE: ghcr.io/toolsdk-ai/${{ inputs.image }}:${{ steps.get_version_step.outputs.version }}
        REPO: vikadata/ops-manager
        SEMVER_FULL: ${{ steps.get_version_step.outputs.version }}
      shell: bash
      run: |
        curl --location --request POST "https://api.github.com/repos/${REPO}/dispatches" \
              --header 'Authorization: token '${CR_PAT}'' \
              --header 'Accept: application/vnd.github.everest-preview+json' \
              --header 'Content-Type: application/json' \
              --data '{
              "event_type": "deploy-bika",
                  "client_payload":{
                      "SEMVER_FULL":"'${SEMVER_FULL}'",
                      "edition": "'${EDITION}'",
                      "app": "'${APP}'",
                      "containerName": "'${APP}'",
                      "image": "'${IMAGE}'",
                      "arch": "'$(uname -m)'"
                      }
              }'
